/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package com.liferay.portal.security.wedeploy.auth.model.impl;

import aQute.bnd.annotation.ProviderType;

import com.liferay.expando.kernel.model.ExpandoBridge;
import com.liferay.expando.kernel.util.ExpandoBridgeFactoryUtil;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.model.CacheModel;
import com.liferay.portal.kernel.model.impl.BaseModelImpl;
import com.liferay.portal.kernel.service.ServiceContext;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;
import com.liferay.portal.security.wedeploy.auth.model.WedeployAuthApp;
import com.liferay.portal.security.wedeploy.auth.model.WedeployAuthAppModel;
import com.liferay.portal.security.wedeploy.auth.model.WedeployAuthAppSoap;

import java.io.Serializable;

import java.sql.Types;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * The base model implementation for the WedeployAuthApp service. Represents a row in the &quot;WedeployAuthApp&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link WedeployAuthAppModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link WedeployAuthAppImpl}.
 * </p>
 *
 * @author Brian Wing Shun Chan
 * @see WedeployAuthAppImpl
 * @see WedeployAuthApp
 * @see WedeployAuthAppModel
 * @generated
 */
@JSON(strict = true)
@ProviderType
public class WedeployAuthAppModelImpl extends BaseModelImpl<WedeployAuthApp>
	implements WedeployAuthAppModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a wedeploy auth app model instance should use the {@link WedeployAuthApp} interface instead.
	 */
	public static final String TABLE_NAME = "WedeployAuthApp";
	public static final Object[][] TABLE_COLUMNS = {
			{ "uuid_", Types.VARCHAR },
			{ "wedeployAuthId", Types.BIGINT },
			{ "clientId", Types.VARCHAR },
			{ "clientName", Types.VARCHAR },
			{ "secret", Types.VARCHAR },
			{ "companyId", Types.BIGINT }
		};
	public static final Map<String, Integer> TABLE_COLUMNS_MAP = new HashMap<String, Integer>();

	static {
		TABLE_COLUMNS_MAP.put("uuid_", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("wedeployAuthId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("clientId", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("clientName", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("secret", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("companyId", Types.BIGINT);
	}

	public static final String TABLE_SQL_CREATE = "create table WedeployAuthApp (uuid_ VARCHAR(75) null,wedeployAuthId LONG not null primary key,clientId VARCHAR(75) null,clientName VARCHAR(75) null,secret VARCHAR(75) null,companyId LONG)";
	public static final String TABLE_SQL_DROP = "drop table WedeployAuthApp";
	public static final String ORDER_BY_JPQL = " ORDER BY wedeployAuthApp.wedeployAuthId ASC";
	public static final String ORDER_BY_SQL = " ORDER BY WedeployAuthApp.wedeployAuthId ASC";
	public static final String DATA_SOURCE = "liferayDataSource";
	public static final String SESSION_FACTORY = "liferaySessionFactory";
	public static final String TX_MANAGER = "liferayTransactionManager";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.portal.security.wedeploy.auth.service.util.ServiceProps.get(
				"value.object.entity.cache.enabled.com.liferay.portal.security.wedeploy.auth.model.WedeployAuthApp"),
			true);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.portal.security.wedeploy.auth.service.util.ServiceProps.get(
				"value.object.finder.cache.enabled.com.liferay.portal.security.wedeploy.auth.model.WedeployAuthApp"),
			true);
	public static final boolean COLUMN_BITMASK_ENABLED = GetterUtil.getBoolean(com.liferay.portal.security.wedeploy.auth.service.util.ServiceProps.get(
				"value.object.column.bitmask.enabled.com.liferay.portal.security.wedeploy.auth.model.WedeployAuthApp"),
			true);
	public static final long CLIENTNAME_COLUMN_BITMASK = 1L;
	public static final long COMPANYID_COLUMN_BITMASK = 2L;
	public static final long UUID_COLUMN_BITMASK = 4L;
	public static final long WEDEPLOYAUTHID_COLUMN_BITMASK = 8L;

	/**
	 * Converts the soap model instance into a normal model instance.
	 *
	 * @param soapModel the soap model instance to convert
	 * @return the normal model instance
	 */
	public static WedeployAuthApp toModel(WedeployAuthAppSoap soapModel) {
		if (soapModel == null) {
			return null;
		}

		WedeployAuthApp model = new WedeployAuthAppImpl();

		model.setUuid(soapModel.getUuid());
		model.setWedeployAuthId(soapModel.getWedeployAuthId());
		model.setClientId(soapModel.getClientId());
		model.setClientName(soapModel.getClientName());
		model.setSecret(soapModel.getSecret());
		model.setCompanyId(soapModel.getCompanyId());

		return model;
	}

	/**
	 * Converts the soap model instances into normal model instances.
	 *
	 * @param soapModels the soap model instances to convert
	 * @return the normal model instances
	 */
	public static List<WedeployAuthApp> toModels(
		WedeployAuthAppSoap[] soapModels) {
		if (soapModels == null) {
			return null;
		}

		List<WedeployAuthApp> models = new ArrayList<WedeployAuthApp>(soapModels.length);

		for (WedeployAuthAppSoap soapModel : soapModels) {
			models.add(toModel(soapModel));
		}

		return models;
	}

	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.liferay.portal.security.wedeploy.auth.service.util.ServiceProps.get(
				"lock.expiration.time.com.liferay.portal.security.wedeploy.auth.model.WedeployAuthApp"));

	public WedeployAuthAppModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _wedeployAuthId;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setWedeployAuthId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _wedeployAuthId;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return WedeployAuthApp.class;
	}

	@Override
	public String getModelClassName() {
		return WedeployAuthApp.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		attributes.put("uuid", getUuid());
		attributes.put("wedeployAuthId", getWedeployAuthId());
		attributes.put("clientId", getClientId());
		attributes.put("clientName", getClientName());
		attributes.put("secret", getSecret());
		attributes.put("companyId", getCompanyId());

		attributes.put("entityCacheEnabled", isEntityCacheEnabled());
		attributes.put("finderCacheEnabled", isFinderCacheEnabled());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		String uuid = (String)attributes.get("uuid");

		if (uuid != null) {
			setUuid(uuid);
		}

		Long wedeployAuthId = (Long)attributes.get("wedeployAuthId");

		if (wedeployAuthId != null) {
			setWedeployAuthId(wedeployAuthId);
		}

		String clientId = (String)attributes.get("clientId");

		if (clientId != null) {
			setClientId(clientId);
		}

		String clientName = (String)attributes.get("clientName");

		if (clientName != null) {
			setClientName(clientName);
		}

		String secret = (String)attributes.get("secret");

		if (secret != null) {
			setSecret(secret);
		}

		Long companyId = (Long)attributes.get("companyId");

		if (companyId != null) {
			setCompanyId(companyId);
		}
	}

	@JSON
	@Override
	public String getUuid() {
		if (_uuid == null) {
			return StringPool.BLANK;
		}
		else {
			return _uuid;
		}
	}

	@Override
	public void setUuid(String uuid) {
		if (_originalUuid == null) {
			_originalUuid = _uuid;
		}

		_uuid = uuid;
	}

	public String getOriginalUuid() {
		return GetterUtil.getString(_originalUuid);
	}

	@JSON
	@Override
	public long getWedeployAuthId() {
		return _wedeployAuthId;
	}

	@Override
	public void setWedeployAuthId(long wedeployAuthId) {
		_wedeployAuthId = wedeployAuthId;
	}

	@JSON
	@Override
	public String getClientId() {
		if (_clientId == null) {
			return StringPool.BLANK;
		}
		else {
			return _clientId;
		}
	}

	@Override
	public void setClientId(String clientId) {
		_clientId = clientId;
	}

	@JSON
	@Override
	public String getClientName() {
		if (_clientName == null) {
			return StringPool.BLANK;
		}
		else {
			return _clientName;
		}
	}

	@Override
	public void setClientName(String clientName) {
		_columnBitmask |= CLIENTNAME_COLUMN_BITMASK;

		if (_originalClientName == null) {
			_originalClientName = _clientName;
		}

		_clientName = clientName;
	}

	public String getOriginalClientName() {
		return GetterUtil.getString(_originalClientName);
	}

	@JSON
	@Override
	public String getSecret() {
		if (_secret == null) {
			return StringPool.BLANK;
		}
		else {
			return _secret;
		}
	}

	@Override
	public void setSecret(String secret) {
		_secret = secret;
	}

	@JSON
	@Override
	public long getCompanyId() {
		return _companyId;
	}

	@Override
	public void setCompanyId(long companyId) {
		_columnBitmask |= COMPANYID_COLUMN_BITMASK;

		if (!_setOriginalCompanyId) {
			_setOriginalCompanyId = true;

			_originalCompanyId = _companyId;
		}

		_companyId = companyId;
	}

	public long getOriginalCompanyId() {
		return _originalCompanyId;
	}

	public long getColumnBitmask() {
		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(getCompanyId(),
			WedeployAuthApp.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public WedeployAuthApp toEscapedModel() {
		if (_escapedModel == null) {
			_escapedModel = (WedeployAuthApp)ProxyUtil.newProxyInstance(_classLoader,
					_escapedModelInterfaces, new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		WedeployAuthAppImpl wedeployAuthAppImpl = new WedeployAuthAppImpl();

		wedeployAuthAppImpl.setUuid(getUuid());
		wedeployAuthAppImpl.setWedeployAuthId(getWedeployAuthId());
		wedeployAuthAppImpl.setClientId(getClientId());
		wedeployAuthAppImpl.setClientName(getClientName());
		wedeployAuthAppImpl.setSecret(getSecret());
		wedeployAuthAppImpl.setCompanyId(getCompanyId());

		wedeployAuthAppImpl.resetOriginalValues();

		return wedeployAuthAppImpl;
	}

	@Override
	public int compareTo(WedeployAuthApp wedeployAuthApp) {
		long primaryKey = wedeployAuthApp.getPrimaryKey();

		if (getPrimaryKey() < primaryKey) {
			return -1;
		}
		else if (getPrimaryKey() > primaryKey) {
			return 1;
		}
		else {
			return 0;
		}
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof WedeployAuthApp)) {
			return false;
		}

		WedeployAuthApp wedeployAuthApp = (WedeployAuthApp)obj;

		long primaryKey = wedeployAuthApp.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	@Override
	public boolean isEntityCacheEnabled() {
		return ENTITY_CACHE_ENABLED;
	}

	@Override
	public boolean isFinderCacheEnabled() {
		return FINDER_CACHE_ENABLED;
	}

	@Override
	public void resetOriginalValues() {
		WedeployAuthAppModelImpl wedeployAuthAppModelImpl = this;

		wedeployAuthAppModelImpl._originalUuid = wedeployAuthAppModelImpl._uuid;

		wedeployAuthAppModelImpl._originalClientName = wedeployAuthAppModelImpl._clientName;

		wedeployAuthAppModelImpl._originalCompanyId = wedeployAuthAppModelImpl._companyId;

		wedeployAuthAppModelImpl._setOriginalCompanyId = false;

		wedeployAuthAppModelImpl._columnBitmask = 0;
	}

	@Override
	public CacheModel<WedeployAuthApp> toCacheModel() {
		WedeployAuthAppCacheModel wedeployAuthAppCacheModel = new WedeployAuthAppCacheModel();

		wedeployAuthAppCacheModel.uuid = getUuid();

		String uuid = wedeployAuthAppCacheModel.uuid;

		if ((uuid != null) && (uuid.length() == 0)) {
			wedeployAuthAppCacheModel.uuid = null;
		}

		wedeployAuthAppCacheModel.wedeployAuthId = getWedeployAuthId();

		wedeployAuthAppCacheModel.clientId = getClientId();

		String clientId = wedeployAuthAppCacheModel.clientId;

		if ((clientId != null) && (clientId.length() == 0)) {
			wedeployAuthAppCacheModel.clientId = null;
		}

		wedeployAuthAppCacheModel.clientName = getClientName();

		String clientName = wedeployAuthAppCacheModel.clientName;

		if ((clientName != null) && (clientName.length() == 0)) {
			wedeployAuthAppCacheModel.clientName = null;
		}

		wedeployAuthAppCacheModel.secret = getSecret();

		String secret = wedeployAuthAppCacheModel.secret;

		if ((secret != null) && (secret.length() == 0)) {
			wedeployAuthAppCacheModel.secret = null;
		}

		wedeployAuthAppCacheModel.companyId = getCompanyId();

		return wedeployAuthAppCacheModel;
	}

	@Override
	public String toString() {
		StringBundler sb = new StringBundler(13);

		sb.append("{uuid=");
		sb.append(getUuid());
		sb.append(", wedeployAuthId=");
		sb.append(getWedeployAuthId());
		sb.append(", clientId=");
		sb.append(getClientId());
		sb.append(", clientName=");
		sb.append(getClientName());
		sb.append(", secret=");
		sb.append(getSecret());
		sb.append(", companyId=");
		sb.append(getCompanyId());
		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		StringBundler sb = new StringBundler(22);

		sb.append("<model><model-name>");
		sb.append(
			"com.liferay.portal.security.wedeploy.auth.model.WedeployAuthApp");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>uuid</column-name><column-value><![CDATA[");
		sb.append(getUuid());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>wedeployAuthId</column-name><column-value><![CDATA[");
		sb.append(getWedeployAuthId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>clientId</column-name><column-value><![CDATA[");
		sb.append(getClientId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>clientName</column-name><column-value><![CDATA[");
		sb.append(getClientName());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>secret</column-name><column-value><![CDATA[");
		sb.append(getSecret());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>companyId</column-name><column-value><![CDATA[");
		sb.append(getCompanyId());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private static final ClassLoader _classLoader = WedeployAuthApp.class.getClassLoader();
	private static final Class<?>[] _escapedModelInterfaces = new Class[] {
			WedeployAuthApp.class
		};
	private String _uuid;
	private String _originalUuid;
	private long _wedeployAuthId;
	private String _clientId;
	private String _clientName;
	private String _originalClientName;
	private String _secret;
	private long _companyId;
	private long _originalCompanyId;
	private boolean _setOriginalCompanyId;
	private long _columnBitmask;
	private WedeployAuthApp _escapedModel;
}