/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package com.liferay.portal.security.wedeploy.auth.service.base;

import aQute.bnd.annotation.ProviderType;

import com.liferay.portal.kernel.bean.BeanReference;
import com.liferay.portal.kernel.dao.db.DB;
import com.liferay.portal.kernel.dao.db.DBManagerUtil;
import com.liferay.portal.kernel.dao.jdbc.SqlUpdate;
import com.liferay.portal.kernel.dao.jdbc.SqlUpdateFactoryUtil;
import com.liferay.portal.kernel.dao.orm.ActionableDynamicQuery;
import com.liferay.portal.kernel.dao.orm.DefaultActionableDynamicQuery;
import com.liferay.portal.kernel.dao.orm.DynamicQuery;
import com.liferay.portal.kernel.dao.orm.DynamicQueryFactoryUtil;
import com.liferay.portal.kernel.dao.orm.IndexableActionableDynamicQuery;
import com.liferay.portal.kernel.dao.orm.Projection;
import com.liferay.portal.kernel.exception.PortalException;
import com.liferay.portal.kernel.exception.SystemException;
import com.liferay.portal.kernel.model.PersistedModel;
import com.liferay.portal.kernel.module.framework.service.IdentifiableOSGiService;
import com.liferay.portal.kernel.search.Indexable;
import com.liferay.portal.kernel.search.IndexableType;
import com.liferay.portal.kernel.service.BaseLocalServiceImpl;
import com.liferay.portal.kernel.service.PersistedModelLocalServiceRegistry;
import com.liferay.portal.kernel.service.persistence.ClassNamePersistence;
import com.liferay.portal.kernel.service.persistence.UserPersistence;
import com.liferay.portal.kernel.util.OrderByComparator;
import com.liferay.portal.kernel.util.PortalUtil;
import com.liferay.portal.security.wedeploy.auth.model.WedeployAuthApp;
import com.liferay.portal.security.wedeploy.auth.service.WedeployAuthAppLocalService;
import com.liferay.portal.security.wedeploy.auth.service.persistence.WedeployAuthAppPersistence;
import com.liferay.portal.spring.extender.service.ServiceReference;

import java.io.Serializable;

import java.util.List;

import javax.sql.DataSource;

/**
 * Provides the base implementation for the wedeploy auth app local service.
 *
 * <p>
 * This implementation exists only as a container for the default service methods generated by ServiceBuilder. All custom service methods should be put in {@link com.liferay.portal.security.wedeploy.auth.service.impl.WedeployAuthAppLocalServiceImpl}.
 * </p>
 *
 * @author Brian Wing Shun Chan
 * @see com.liferay.portal.security.wedeploy.auth.service.impl.WedeployAuthAppLocalServiceImpl
 * @see com.liferay.portal.security.wedeploy.auth.service.WedeployAuthAppLocalServiceUtil
 * @generated
 */
@ProviderType
public abstract class WedeployAuthAppLocalServiceBaseImpl
	extends BaseLocalServiceImpl implements WedeployAuthAppLocalService,
		IdentifiableOSGiService {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. Always use {@link com.liferay.portal.security.wedeploy.auth.service.WedeployAuthAppLocalServiceUtil} to access the wedeploy auth app local service.
	 */

	/**
	 * Adds the wedeploy auth app to the database. Also notifies the appropriate model listeners.
	 *
	 * @param wedeployAuthApp the wedeploy auth app
	 * @return the wedeploy auth app that was added
	 */
	@Indexable(type = IndexableType.REINDEX)
	@Override
	public WedeployAuthApp addWedeployAuthApp(WedeployAuthApp wedeployAuthApp) {
		wedeployAuthApp.setNew(true);

		return wedeployAuthAppPersistence.update(wedeployAuthApp);
	}

	/**
	 * Creates a new wedeploy auth app with the primary key. Does not add the wedeploy auth app to the database.
	 *
	 * @param wedeployAuthId the primary key for the new wedeploy auth app
	 * @return the new wedeploy auth app
	 */
	@Override
	public WedeployAuthApp createWedeployAuthApp(long wedeployAuthId) {
		return wedeployAuthAppPersistence.create(wedeployAuthId);
	}

	/**
	 * Deletes the wedeploy auth app with the primary key from the database. Also notifies the appropriate model listeners.
	 *
	 * @param wedeployAuthId the primary key of the wedeploy auth app
	 * @return the wedeploy auth app that was removed
	 * @throws PortalException if a wedeploy auth app with the primary key could not be found
	 */
	@Indexable(type = IndexableType.DELETE)
	@Override
	public WedeployAuthApp deleteWedeployAuthApp(long wedeployAuthId)
		throws PortalException {
		return wedeployAuthAppPersistence.remove(wedeployAuthId);
	}

	/**
	 * Deletes the wedeploy auth app from the database. Also notifies the appropriate model listeners.
	 *
	 * @param wedeployAuthApp the wedeploy auth app
	 * @return the wedeploy auth app that was removed
	 */
	@Indexable(type = IndexableType.DELETE)
	@Override
	public WedeployAuthApp deleteWedeployAuthApp(
		WedeployAuthApp wedeployAuthApp) {
		return wedeployAuthAppPersistence.remove(wedeployAuthApp);
	}

	@Override
	public DynamicQuery dynamicQuery() {
		Class<?> clazz = getClass();

		return DynamicQueryFactoryUtil.forClass(WedeployAuthApp.class,
			clazz.getClassLoader());
	}

	/**
	 * Performs a dynamic query on the database and returns the matching rows.
	 *
	 * @param dynamicQuery the dynamic query
	 * @return the matching rows
	 */
	@Override
	public <T> List<T> dynamicQuery(DynamicQuery dynamicQuery) {
		return wedeployAuthAppPersistence.findWithDynamicQuery(dynamicQuery);
	}

	/**
	 * Performs a dynamic query on the database and returns a range of the matching rows.
	 *
	 * <p>
	 * Useful when paginating results. Returns a maximum of <code>end - start</code> instances. <code>start</code> and <code>end</code> are not primary keys, they are indexes in the result set. Thus, <code>0</code> refers to the first result in the set. Setting both <code>start</code> and <code>end</code> to {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS} will return the full result set. If <code>orderByComparator</code> is specified, then the query will include the given ORDER BY logic. If <code>orderByComparator</code> is absent and pagination is required (<code>start</code> and <code>end</code> are not {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS}), then the query will include the default ORDER BY logic from {@link com.liferay.portal.security.wedeploy.auth.model.impl.WedeployAuthAppModelImpl}. If both <code>orderByComparator</code> and pagination are absent, for performance reasons, the query will not have an ORDER BY clause and the returned result set will be sorted on by the primary key in an ascending order.
	 * </p>
	 *
	 * @param dynamicQuery the dynamic query
	 * @param start the lower bound of the range of model instances
	 * @param end the upper bound of the range of model instances (not inclusive)
	 * @return the range of matching rows
	 */
	@Override
	public <T> List<T> dynamicQuery(DynamicQuery dynamicQuery, int start,
		int end) {
		return wedeployAuthAppPersistence.findWithDynamicQuery(dynamicQuery,
			start, end);
	}

	/**
	 * Performs a dynamic query on the database and returns an ordered range of the matching rows.
	 *
	 * <p>
	 * Useful when paginating results. Returns a maximum of <code>end - start</code> instances. <code>start</code> and <code>end</code> are not primary keys, they are indexes in the result set. Thus, <code>0</code> refers to the first result in the set. Setting both <code>start</code> and <code>end</code> to {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS} will return the full result set. If <code>orderByComparator</code> is specified, then the query will include the given ORDER BY logic. If <code>orderByComparator</code> is absent and pagination is required (<code>start</code> and <code>end</code> are not {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS}), then the query will include the default ORDER BY logic from {@link com.liferay.portal.security.wedeploy.auth.model.impl.WedeployAuthAppModelImpl}. If both <code>orderByComparator</code> and pagination are absent, for performance reasons, the query will not have an ORDER BY clause and the returned result set will be sorted on by the primary key in an ascending order.
	 * </p>
	 *
	 * @param dynamicQuery the dynamic query
	 * @param start the lower bound of the range of model instances
	 * @param end the upper bound of the range of model instances (not inclusive)
	 * @param orderByComparator the comparator to order the results by (optionally <code>null</code>)
	 * @return the ordered range of matching rows
	 */
	@Override
	public <T> List<T> dynamicQuery(DynamicQuery dynamicQuery, int start,
		int end, OrderByComparator<T> orderByComparator) {
		return wedeployAuthAppPersistence.findWithDynamicQuery(dynamicQuery,
			start, end, orderByComparator);
	}

	/**
	 * Returns the number of rows matching the dynamic query.
	 *
	 * @param dynamicQuery the dynamic query
	 * @return the number of rows matching the dynamic query
	 */
	@Override
	public long dynamicQueryCount(DynamicQuery dynamicQuery) {
		return wedeployAuthAppPersistence.countWithDynamicQuery(dynamicQuery);
	}

	/**
	 * Returns the number of rows matching the dynamic query.
	 *
	 * @param dynamicQuery the dynamic query
	 * @param projection the projection to apply to the query
	 * @return the number of rows matching the dynamic query
	 */
	@Override
	public long dynamicQueryCount(DynamicQuery dynamicQuery,
		Projection projection) {
		return wedeployAuthAppPersistence.countWithDynamicQuery(dynamicQuery,
			projection);
	}

	@Override
	public WedeployAuthApp fetchWedeployAuthApp(long wedeployAuthId) {
		return wedeployAuthAppPersistence.fetchByPrimaryKey(wedeployAuthId);
	}

	/**
	 * Returns the wedeploy auth app with the matching UUID and company.
	 *
	 * @param uuid the wedeploy auth app's UUID
	 * @param companyId the primary key of the company
	 * @return the matching wedeploy auth app, or <code>null</code> if a matching wedeploy auth app could not be found
	 */
	@Override
	public WedeployAuthApp fetchWedeployAuthAppByUuidAndCompanyId(String uuid,
		long companyId) {
		return wedeployAuthAppPersistence.fetchByUuid_C_First(uuid, companyId,
			null);
	}

	/**
	 * Returns the wedeploy auth app with the primary key.
	 *
	 * @param wedeployAuthId the primary key of the wedeploy auth app
	 * @return the wedeploy auth app
	 * @throws PortalException if a wedeploy auth app with the primary key could not be found
	 */
	@Override
	public WedeployAuthApp getWedeployAuthApp(long wedeployAuthId)
		throws PortalException {
		return wedeployAuthAppPersistence.findByPrimaryKey(wedeployAuthId);
	}

	@Override
	public ActionableDynamicQuery getActionableDynamicQuery() {
		ActionableDynamicQuery actionableDynamicQuery = new DefaultActionableDynamicQuery();

		actionableDynamicQuery.setBaseLocalService(wedeployAuthAppLocalService);
		actionableDynamicQuery.setClassLoader(getClassLoader());
		actionableDynamicQuery.setModelClass(WedeployAuthApp.class);

		actionableDynamicQuery.setPrimaryKeyPropertyName("wedeployAuthId");

		return actionableDynamicQuery;
	}

	@Override
	public IndexableActionableDynamicQuery getIndexableActionableDynamicQuery() {
		IndexableActionableDynamicQuery indexableActionableDynamicQuery = new IndexableActionableDynamicQuery();

		indexableActionableDynamicQuery.setBaseLocalService(wedeployAuthAppLocalService);
		indexableActionableDynamicQuery.setClassLoader(getClassLoader());
		indexableActionableDynamicQuery.setModelClass(WedeployAuthApp.class);

		indexableActionableDynamicQuery.setPrimaryKeyPropertyName(
			"wedeployAuthId");

		return indexableActionableDynamicQuery;
	}

	protected void initActionableDynamicQuery(
		ActionableDynamicQuery actionableDynamicQuery) {
		actionableDynamicQuery.setBaseLocalService(wedeployAuthAppLocalService);
		actionableDynamicQuery.setClassLoader(getClassLoader());
		actionableDynamicQuery.setModelClass(WedeployAuthApp.class);

		actionableDynamicQuery.setPrimaryKeyPropertyName("wedeployAuthId");
	}

	/**
	 * @throws PortalException
	 */
	@Override
	public PersistedModel deletePersistedModel(PersistedModel persistedModel)
		throws PortalException {
		return wedeployAuthAppLocalService.deleteWedeployAuthApp((WedeployAuthApp)persistedModel);
	}

	@Override
	public PersistedModel getPersistedModel(Serializable primaryKeyObj)
		throws PortalException {
		return wedeployAuthAppPersistence.findByPrimaryKey(primaryKeyObj);
	}

	/**
	 * Returns the wedeploy auth app with the matching UUID and company.
	 *
	 * @param uuid the wedeploy auth app's UUID
	 * @param companyId the primary key of the company
	 * @return the matching wedeploy auth app
	 * @throws PortalException if a matching wedeploy auth app could not be found
	 */
	@Override
	public WedeployAuthApp getWedeployAuthAppByUuidAndCompanyId(String uuid,
		long companyId) throws PortalException {
		return wedeployAuthAppPersistence.findByUuid_C_First(uuid, companyId,
			null);
	}

	/**
	 * Returns a range of all the wedeploy auth apps.
	 *
	 * <p>
	 * Useful when paginating results. Returns a maximum of <code>end - start</code> instances. <code>start</code> and <code>end</code> are not primary keys, they are indexes in the result set. Thus, <code>0</code> refers to the first result in the set. Setting both <code>start</code> and <code>end</code> to {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS} will return the full result set. If <code>orderByComparator</code> is specified, then the query will include the given ORDER BY logic. If <code>orderByComparator</code> is absent and pagination is required (<code>start</code> and <code>end</code> are not {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS}), then the query will include the default ORDER BY logic from {@link com.liferay.portal.security.wedeploy.auth.model.impl.WedeployAuthAppModelImpl}. If both <code>orderByComparator</code> and pagination are absent, for performance reasons, the query will not have an ORDER BY clause and the returned result set will be sorted on by the primary key in an ascending order.
	 * </p>
	 *
	 * @param start the lower bound of the range of wedeploy auth apps
	 * @param end the upper bound of the range of wedeploy auth apps (not inclusive)
	 * @return the range of wedeploy auth apps
	 */
	@Override
	public List<WedeployAuthApp> getWedeployAuthApps(int start, int end) {
		return wedeployAuthAppPersistence.findAll(start, end);
	}

	/**
	 * Returns the number of wedeploy auth apps.
	 *
	 * @return the number of wedeploy auth apps
	 */
	@Override
	public int getWedeployAuthAppsCount() {
		return wedeployAuthAppPersistence.countAll();
	}

	/**
	 * Updates the wedeploy auth app in the database or adds it if it does not yet exist. Also notifies the appropriate model listeners.
	 *
	 * @param wedeployAuthApp the wedeploy auth app
	 * @return the wedeploy auth app that was updated
	 */
	@Indexable(type = IndexableType.REINDEX)
	@Override
	public WedeployAuthApp updateWedeployAuthApp(
		WedeployAuthApp wedeployAuthApp) {
		return wedeployAuthAppPersistence.update(wedeployAuthApp);
	}

	/**
	 * Returns the wedeploy auth app local service.
	 *
	 * @return the wedeploy auth app local service
	 */
	public WedeployAuthAppLocalService getWedeployAuthAppLocalService() {
		return wedeployAuthAppLocalService;
	}

	/**
	 * Sets the wedeploy auth app local service.
	 *
	 * @param wedeployAuthAppLocalService the wedeploy auth app local service
	 */
	public void setWedeployAuthAppLocalService(
		WedeployAuthAppLocalService wedeployAuthAppLocalService) {
		this.wedeployAuthAppLocalService = wedeployAuthAppLocalService;
	}

	/**
	 * Returns the wedeploy auth app persistence.
	 *
	 * @return the wedeploy auth app persistence
	 */
	public WedeployAuthAppPersistence getWedeployAuthAppPersistence() {
		return wedeployAuthAppPersistence;
	}

	/**
	 * Sets the wedeploy auth app persistence.
	 *
	 * @param wedeployAuthAppPersistence the wedeploy auth app persistence
	 */
	public void setWedeployAuthAppPersistence(
		WedeployAuthAppPersistence wedeployAuthAppPersistence) {
		this.wedeployAuthAppPersistence = wedeployAuthAppPersistence;
	}

	/**
	 * Returns the counter local service.
	 *
	 * @return the counter local service
	 */
	public com.liferay.counter.kernel.service.CounterLocalService getCounterLocalService() {
		return counterLocalService;
	}

	/**
	 * Sets the counter local service.
	 *
	 * @param counterLocalService the counter local service
	 */
	public void setCounterLocalService(
		com.liferay.counter.kernel.service.CounterLocalService counterLocalService) {
		this.counterLocalService = counterLocalService;
	}

	/**
	 * Returns the class name local service.
	 *
	 * @return the class name local service
	 */
	public com.liferay.portal.kernel.service.ClassNameLocalService getClassNameLocalService() {
		return classNameLocalService;
	}

	/**
	 * Sets the class name local service.
	 *
	 * @param classNameLocalService the class name local service
	 */
	public void setClassNameLocalService(
		com.liferay.portal.kernel.service.ClassNameLocalService classNameLocalService) {
		this.classNameLocalService = classNameLocalService;
	}

	/**
	 * Returns the class name persistence.
	 *
	 * @return the class name persistence
	 */
	public ClassNamePersistence getClassNamePersistence() {
		return classNamePersistence;
	}

	/**
	 * Sets the class name persistence.
	 *
	 * @param classNamePersistence the class name persistence
	 */
	public void setClassNamePersistence(
		ClassNamePersistence classNamePersistence) {
		this.classNamePersistence = classNamePersistence;
	}

	/**
	 * Returns the resource local service.
	 *
	 * @return the resource local service
	 */
	public com.liferay.portal.kernel.service.ResourceLocalService getResourceLocalService() {
		return resourceLocalService;
	}

	/**
	 * Sets the resource local service.
	 *
	 * @param resourceLocalService the resource local service
	 */
	public void setResourceLocalService(
		com.liferay.portal.kernel.service.ResourceLocalService resourceLocalService) {
		this.resourceLocalService = resourceLocalService;
	}

	/**
	 * Returns the user local service.
	 *
	 * @return the user local service
	 */
	public com.liferay.portal.kernel.service.UserLocalService getUserLocalService() {
		return userLocalService;
	}

	/**
	 * Sets the user local service.
	 *
	 * @param userLocalService the user local service
	 */
	public void setUserLocalService(
		com.liferay.portal.kernel.service.UserLocalService userLocalService) {
		this.userLocalService = userLocalService;
	}

	/**
	 * Returns the user persistence.
	 *
	 * @return the user persistence
	 */
	public UserPersistence getUserPersistence() {
		return userPersistence;
	}

	/**
	 * Sets the user persistence.
	 *
	 * @param userPersistence the user persistence
	 */
	public void setUserPersistence(UserPersistence userPersistence) {
		this.userPersistence = userPersistence;
	}

	public void afterPropertiesSet() {
		persistedModelLocalServiceRegistry.register("com.liferay.portal.security.wedeploy.auth.model.WedeployAuthApp",
			wedeployAuthAppLocalService);
	}

	public void destroy() {
		persistedModelLocalServiceRegistry.unregister(
			"com.liferay.portal.security.wedeploy.auth.model.WedeployAuthApp");
	}

	/**
	 * Returns the OSGi service identifier.
	 *
	 * @return the OSGi service identifier
	 */
	@Override
	public String getOSGiServiceIdentifier() {
		return WedeployAuthAppLocalService.class.getName();
	}

	protected Class<?> getModelClass() {
		return WedeployAuthApp.class;
	}

	protected String getModelClassName() {
		return WedeployAuthApp.class.getName();
	}

	/**
	 * Performs a SQL query.
	 *
	 * @param sql the sql query
	 */
	protected void runSQL(String sql) {
		try {
			DataSource dataSource = wedeployAuthAppPersistence.getDataSource();

			DB db = DBManagerUtil.getDB();

			sql = db.buildSQL(sql);
			sql = PortalUtil.transformSQL(sql);

			SqlUpdate sqlUpdate = SqlUpdateFactoryUtil.getSqlUpdate(dataSource,
					sql);

			sqlUpdate.update();
		}
		catch (Exception e) {
			throw new SystemException(e);
		}
	}

	@BeanReference(type = WedeployAuthAppLocalService.class)
	protected WedeployAuthAppLocalService wedeployAuthAppLocalService;
	@BeanReference(type = WedeployAuthAppPersistence.class)
	protected WedeployAuthAppPersistence wedeployAuthAppPersistence;
	@ServiceReference(type = com.liferay.counter.kernel.service.CounterLocalService.class)
	protected com.liferay.counter.kernel.service.CounterLocalService counterLocalService;
	@ServiceReference(type = com.liferay.portal.kernel.service.ClassNameLocalService.class)
	protected com.liferay.portal.kernel.service.ClassNameLocalService classNameLocalService;
	@ServiceReference(type = ClassNamePersistence.class)
	protected ClassNamePersistence classNamePersistence;
	@ServiceReference(type = com.liferay.portal.kernel.service.ResourceLocalService.class)
	protected com.liferay.portal.kernel.service.ResourceLocalService resourceLocalService;
	@ServiceReference(type = com.liferay.portal.kernel.service.UserLocalService.class)
	protected com.liferay.portal.kernel.service.UserLocalService userLocalService;
	@ServiceReference(type = UserPersistence.class)
	protected UserPersistence userPersistence;
	@ServiceReference(type = PersistedModelLocalServiceRegistry.class)
	protected PersistedModelLocalServiceRegistry persistedModelLocalServiceRegistry;
}